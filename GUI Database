import sqlite3
from tkinter import *
from tkinter import messagebox
from tkinter import ttk

# Create database and table
conn = sqlite3.connect("students.db")
cursor = conn.cursor()
cursor.execute("""
    CREATE TABLE IF NOT EXISTS students (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        age INTEGER NOT NULL,
        grade TEXT NOT NULL
    )
""")
conn.commit()
conn.close()


# Function to insert data
def add_student():
    if name_var.get() == "" or age_var.get() == "" or grade_var.get() == "":
        messagebox.showerror("Error", "All fields are required!")
        return

    conn = sqlite3.connect("students.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO students (name, age, grade) VALUES (?, ?, ?)", 
                   (name_var.get(), age_var.get(), grade_var.get()))
    conn.commit()
    conn.close()
    
    messagebox.showinfo("Success", "Student added successfully!")
    clear_fields()
    fetch_data()

# Function to fetch data from the database
def fetch_data():
    conn = sqlite3.connect("students.db")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM students")
    rows = cursor.fetchall()
    conn.close()
    
    student_table.delete(*student_table.get_children())
    for row in rows:
        student_table.insert("", END, values=row)

# Function to get selected row data
def get_selected(event):
    selected_row = student_table.focus()
    data = student_table.item(selected_row, "values")
    if data:
        id_var.set(data[0])
        name_var.set(data[1])
        age_var.set(data[2])
        grade_var.set(data[3])

# Function to update student data
def update_student():
    if id_var.get() == "":
        messagebox.showerror("Error", "Please select a student to update")
        return

    conn = sqlite3.connect("students.db")
    cursor = conn.cursor()
    cursor.execute("UPDATE students SET name=?, age=?, grade=? WHERE id=?", 
                   (name_var.get(), age_var.get(), grade_var.get(), id_var.get()))
    conn.commit()
    conn.close()

    messagebox.showinfo("Success", "Student updated successfully!")
    clear_fields()
    fetch_data()

# Function to delete student data
def delete_student():
    if id_var.get() == "":
        messagebox.showerror("Error", "Please select a student to delete")
        return

    conn = sqlite3.connect("students.db")
    cursor = conn.cursor()
    cursor.execute("DELETE FROM students WHERE id=?", (id_var.get(),))
    conn.commit()
    conn.close()

    messagebox.showinfo("Success", "Student deleted successfully!")
    clear_fields()
    fetch_data()

# Function to clear input fields
def clear_fields():
    id_var.set("")
    name_var.set("")
    age_var.set("")
    grade_var.set("")


# Initialize main window
root = Tk()
root.title("Student Management System")
root.geometry("600x500")

# Variables
id_var = StringVar()
name_var = StringVar()
age_var = StringVar()
grade_var = StringVar()

# Labels & Entry Fields
Label(root, text="Name").grid(row=0, column=0, padx=10, pady=5)
Entry(root, textvariable=name_var).grid(row=0, column=1, padx=10, pady=5)

Label(root, text="Age").grid(row=1, column=0, padx=10, pady=5)
Entry(root, textvariable=age_var).grid(row=1, column=1, padx=10, pady=5)

Label(root, text="Grade").grid(row=2, column=0, padx=10, pady=5)
Entry(root, textvariable=grade_var).grid(row=2, column=1, padx=10, pady=5)

# Buttons
Button(root, text="Add", command=add_student).grid(row=3, column=0, padx=10, pady=5)
Button(root, text="Update", command=update_student).grid(row=3, column=1, padx=10, pady=5)
Button(root, text="Delete", command=delete_student).grid(row=3, column=2, padx=10, pady=5)
Button(root, text="Clear", command=clear_fields).grid(row=3, column=3, padx=10, pady=5)

# Student Table
columns = ("ID", "Name", "Age", "Grade")
student_table = ttk.Treeview(root, columns=columns, show="headings")

for col in columns:
    student_table.heading(col, text=col)

student_table.bind("<ButtonRelease-1>", get_selected)
student_table.grid(row=4, column=0, columnspan=4, padx=10, pady=10)

# Load Data
fetch_data()

# Run Application
root.mainloop()
