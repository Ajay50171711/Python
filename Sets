

üêç Python Set ‚Äì Complete Notes
1Ô∏è‚É£ Introduction
Definition: A set is an unordered, mutable, and unindexed collection of unique elements.

Key Features:

No duplicate elements.

Elements must be hashable (immutable types like numbers, strings, tuples).

Sets themselves are mutable, but set elements must be immutable.

2Ô∏è‚É£ Creating Sets
# Empty set
s = set()          # ‚úÖ Correct way
s = {}             # ‚ùå Creates a dictionary, not a set

# With elements
numbers = {1, 2, 3}
mixed = {1, 2.5, "hello", (3, 4)}
‚ö†Ô∏è Lists, dicts, and other sets cannot be elements because they are not hashable.

3Ô∏è‚É£ Adding & Removing Elements
Operation	Method/Operator	Example
Add single element	add()	s.add(5)
Add multiple elements	update(iterable)	s.update([6,7], {8,9})
Remove specific element	remove(x) (error if x not found)	s.remove(5)
Remove safely	discard(x) (no error if missing)	s.discard(10)
Remove & return random	pop()	s.pop()
Remove all elements	clear()	s.clear()
4Ô∏è‚É£ Set Operations
Python sets support mathematical set operations:

Operation	Operator	Method	Example
Union	`	`	union()
Intersection	&	intersection()	A & B
Difference	-	difference()	A - B
Symmetric Difference	^	symmetric_difference()	A ^ B
A = {1, 2, 3}
B = {3, 4, 5}

print(A | B)   # {1,2,3,4,5}
print(A & B)   # {3}
print(A - B)   # {1,2}
print(A ^ B)   # {1,2,4,5}
5Ô∏è‚É£ Membership & Iteration
if 2 in A:  
    print("Present")

for item in A:
    print(item)
Sets are unordered, so iteration order is not guaranteed.

6Ô∏è‚É£ Set Comparisons
Operation	Example	Meaning
Subset	A <= B or A.issubset(B)	All elements of A are in B
Proper Subset	A < B	A is subset of B and A != B
Superset	A >= B or A.issuperset(B)	B is subset of A
Proper Superset	A > B	A is superset of B and A != B
Disjoint	A.isdisjoint(B)	True if A and B have no common elements
7Ô∏è‚É£ Built-in Functions
Function	Description	Example
len(s)	Number of elements	len(A)
min(s), max(s)	Minimum/Maximum element (for comparable types)	min({5, 2, 9}) ‚Üí 2
sum(s)	Sum of numeric elements	sum({1,2,3}) ‚Üí 6
sorted(s)	Returns a sorted list	sorted(A)
8Ô∏è‚É£ Frozenset (Immutable Set)
Immutable version of a set.

Hashable ‚Üí can be used as dict keys or elements of another set.

fs = frozenset([1, 2, 3])
# fs.add(4)  # ‚ùå Error
9Ô∏è‚É£ Set Comprehension
Similar to list comprehension but creates a set.

squares = {x**2 for x in range(5)}
print(squares)   # {0, 1, 4, 9, 16}
üîü Practical Tips & Gotchas
Duplicates are automatically removed:
{1, 2, 2, 3} ‚Üí {1, 2, 3}

Unhashable elements:
{[1,2], 3} ‚ùå (lists are mutable)

Sets are faster than lists for membership tests: x in set is O(1) average.

üèÅ Real-life Use Cases
Remove duplicates from a list:

data = [1,2,2,3,1]
unique = set(data)  # {1,2,3}
Common friends in social networks (intersection).

Tagging system where order doesn‚Äôt matter.

Checking unique words in a text.


add_heading("2Ô∏è‚É£ Creating Sets", 2)
add_code("# Empty set\ns = set()          # Correct way\ns = {}             # Creates a dictionary, not a set\n\n# With elements\nnumbers = {1, 2, 3}\nmixed = {1, 2.5, \"hello\", (3, 4)}")
add_para("‚ö†Ô∏è Lists, dicts, and other sets cannot be elements because they are not hashable.")

add_heading("3Ô∏è‚É£ Adding & Removing Elements", 2)
add_para("Common methods: add(), update(), remove(), discard(), pop(), clear()")
add_code("s.add(5)\ns.update([6,7], {8,9})\ns.remove(5)\ns.discard(10)\ns.pop()\ns.clear()")

add_heading("4Ô∏è‚É£ Set Operations", 2)
add_para("Supports mathematical set operations: union, intersection, difference, symmetric difference.")
add_code("A = {1, 2, 3}\nB = {3, 4, 5}\n\nA | B  # union\nA & B  # intersection\nA - B  # difference\nA ^ B  # symmetric difference")

add_heading("5Ô∏è‚É£ Membership & Iteration", 2)
add_code("if 2 in A:\n    print(\"Present\")\n\nfor item in A:\n    print(item)")

add_heading("6Ô∏è‚É£ Set Comparisons", 2)
add_para("Subset, superset, proper subset/superset, and disjoint checks.")
add_code("A <= B  # subset\nA.issuperset(B)\nA.isdisjoint(B)")

add_heading("7Ô∏è‚É£ Built-in Functions", 2)
add_para("len(s), min(s), max(s), sum(s), sorted(s)")

add_heading("8Ô∏è‚É£ Frozenset (Immutable Set)", 2)
add_code("fs = frozenset([1, 2, 3])  # Immutable")

add_heading("9Ô∏è‚É£ Set Comprehension", 2)
add_code("squares = {x**2 for x in range(5)}")

add_heading("üîü Practical Tips & Gotchas", 2)
add_para("‚Ä¢ Duplicates are automatically removed.\n"
         "‚Ä¢ Unhashable elements (like lists) cannot be added.\n"
         "‚Ä¢ Sets are faster than lists for membership tests.")

add_heading("üèÅ Real-life Use Cases", 2)
add_code("data = [1,2,2,3,1]\nunique = set(data)  # Remove duplicates")

add_heading("‚úçÔ∏è Summary Table", 2)
table_data = [
    ["Feature", "Set", "Frozenset"],
    ["Mutable", "Yes", "No"],
    ["Hashable", "No", "Yes"],
    ["Allows duplicates", "No", "No"],
    ["Supports set operations", "Yes", "Yes"]
]
table = Table(table_data, hAlign='LEFT')
table.setStyle(TableStyle([
    ('BACKGROUND', (0, 0), (-1, 0), colors.lightgrey),
    ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
    ('ALIGN', (0, 0), (-1, -1), 'CENTER')
]))
flow.append(table)

# Build PDF
doc.build(flow)
pdf_path
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
Cell In[1], line 17
     15 styles.add(ParagraphStyle(name='Heading1Custom', parent=styles['Heading1'], fontSize=16, spaceAfter=12))
     16 styles.add(ParagraphStyle(name='Heading2Custom', parent=styles['Heading2'], fontSize=13, spaceAfter=8))
---> 17 styles.add(ParagraphStyle(name='Code', fontName='Courier', fontSize=9, backColor=colors.whitesmoke, leading=12))
     18 styles.add(ParagraphStyle(name='BodyCustom', parent=styles['BodyText'], spaceAfter=6))
     20 flow = []

File ~/.local/lib/python3.11/site-packages/reportlab/lib/styles.py:242, in StyleSheet1.add(self, style, alias)
    240 key = style.name
    241 if key in self.byName:
--> 242     raise KeyError("Style '%s' already defined in stylesheet" % key)
    243 if key in self.byAlias:
    244     raise KeyError("Style name '%s' is already an alias in stylesheet" % key)

KeyError: "Style 'Code' already defined in stylesheet"

Analyzed
Always show details

from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib import colors

pdf_path = "/mnt/data/python_set_notes.pdf"

doc = SimpleDocTemplate(pdf_path, pagesize=A4,
                        rightMargin=40, leftMargin=40,
                        topMargin=40, bottomMargin=30)

styles = getSampleStyleSheet()
# Use unique style names to avoid conflict
styles.add(ParagraphStyle(name='Heading1Custom', parent=styles['Heading1'], fontSize=16, spaceAfter=12))
styles.add(ParagraphStyle(name='Heading2Custom', parent=styles['Heading2'], fontSize=13, spaceAfter=8))
styles.add(ParagraphStyle(name='CodeBlock', fontName='Courier', fontSize=9, backColor=colors.whitesmoke, leading=12))
styles.add(ParagraphStyle(name='BodyCustom', parent=styles['BodyText'], spaceAfter=6))

flow = []

def add_heading(text, level=1):
    style = styles['Heading1Custom'] if level == 1 else styles['Heading2Custom']
    flow.append(Paragraph(text, style))

def add_para(text):
    flow.append(Paragraph(text, styles['BodyCustom']))

def add_code(code):
    flow.append(Paragraph(f"<font face='Courier'>{code}</font>", styles['CodeBlock']))

# Content building (same as before)
add_heading("üêç Python Set ‚Äì Complete Notes", 1)
add_heading("1Ô∏è‚É£ Introduction", 2)
add_para("A set is an unordered, mutable, and unindexed collection of unique elements. "
         "Key features: no duplicates, elements must be hashable (immutable), "
         "sets are mutable but set elements must be immutable.")

add_heading("2Ô∏è‚É£ Creating Sets", 2)
add_code("# Empty set\ns = set()          # Correct way\ns = {}             # Creates a dictionary, not a set\n\n# With elements\nnumbers = {1, 2, 3}\nmixed = {1, 2.5, \"hello\", (3, 4)}")
add_para("‚ö†Ô∏è Lists, dicts, and other sets cannot be elements because they are not hashable.")

add_heading("3Ô∏è‚É£ Adding & Removing Elements", 2)
add_para("Common methods: add(), update(), remove(), discard(), pop(), clear()")
add_code("s.add(5)\ns.update([6,7], {8,9})\ns.remove(5)\ns.discard(10)\ns.pop()\ns.clear()")

add_heading("4Ô∏è‚É£ Set Operations", 2)
add_para("Supports mathematical set operations: union, intersection, difference, symmetric difference.")
add_code("A = {1, 2, 3}\nB = {3, 4, 5}\n\nA | B  # union\nA & B  # intersection\nA - B  # difference\nA ^ B  # symmetric difference")

add_heading("5Ô∏è‚É£ Membership & Iteration", 2)
add_code("if 2 in A:\n    print(\"Present\")\n\nfor item in A:\n    print(item)")

add_heading("6Ô∏è‚É£ Set Comparisons", 2)
add_para("Subset, superset, proper subset/superset, and disjoint checks.")
add_code("A <= B  # subset\nA.issuperset(B)\nA.isdisjoint(B)")

add_heading("7Ô∏è‚É£ Built-in Functions", 2)
add_para("len(s), min(s), max(s), sum(s), sorted(s)")

add_heading("8Ô∏è‚É£ Frozenset (Immutable Set)", 2)
add_code("fs = frozenset([1, 2, 3])  # Immutable")

add_heading("9Ô∏è‚É£ Set Comprehension", 2)
add_code("squares = {x**2 for x in range(5)}")

add_heading("üîü Practical Tips & Gotchas", 2)
add_para("‚Ä¢ Duplicates are automatically removed.\n"
         "‚Ä¢ Unhashable elements (like lists) cannot be added.\n"
         "‚Ä¢ Sets are faster than lists for membership tests.")

add_heading("üèÅ Real-life Use Cases", 2)
add_code("data = [1,2,2,3,1]\nunique = set(data)  # Remove duplicates")

add_heading("‚úçÔ∏è Summary Table", 2)
table_data = [
    ["Feature", "Set", "Frozenset"],
    ["Mutable", "Yes", "No"],
    ["Hashable", "No", "Yes"],
    ["Allows duplicates", "No", "No"],
    ["Supports set operations", "Yes", "Yes"]
]
table = Table(table_data, hAlign='LEFT')
table.setStyle(TableStyle([
    ('BACKGROUND', (0, 0), (-1, 0), colors.lightgrey),
    ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
    ('ALIGN', (0, 0), (-1, -1), 'CENTER')
]))
flow.append(table)

doc.build(flow)
pdf_path
Result
'/mnt/data/python_set_notes.pdf'
Your formatted PDF with complete Python Set notes is ready:

üìÑ Download python_set_notes.pdf 




No file chosenNo file chosen
ChatGPT can make mistakes. Check important info. See Cookie Preferences.
